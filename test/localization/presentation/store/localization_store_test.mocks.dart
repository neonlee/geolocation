// Mocks generated by Mockito 5.2.0 from annotations
// in cloudwatch/test/localization/presentation/store/localization_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cloudwatch/core/exceptions/failure.dart' as _i5;
import 'package:cloudwatch/localization/domain/entity/current_position_ip_entity.dart'
    as _i6;
import 'package:cloudwatch/localization/domain/usecase/localization_usecase.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [LocalizationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationUsecase extends _i1.Mock
    implements _i3.LocalizationUsecase {
  MockLocalizationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CurrentPositionByIPEntity>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<
                      _i2.Either<_i5.Failure,
                          _i6.CurrentPositionByIPEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i6.CurrentPositionByIPEntity>()))
          as _i4
              .Future<_i2.Either<_i5.Failure, _i6.CurrentPositionByIPEntity>>);
}

/// A class which mocks [Geolocator].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocator extends _i1.Mock implements _i7.Geolocator {
  MockGeolocator() {
    _i1.throwOnMissingStub(this);
  }
}
